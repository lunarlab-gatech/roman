# Hertz at which the algorithm runs
dt: 0.166666666666666667

# Robots for which to include in the experiment
runs: ["Husky1"]

# Environment variable to make parameters below work for each robot
run_env: "ROBOT" 

img_data:
  # Specify that we want to load data from .npy files with memory-mapping
  # Allows us to avoid loading all images into RAM
  type: "npy"
  path: "/home/${USER}/data/Hercules_datasets/V1.4/extract/files_for_roman_baseline/${ROBOT}/rgb/imgs.npy"
  path_times: "/home/${USER}/data/Hercules_datasets/V1.4/extract/files_for_roman_baseline/${ROBOT}/rgb/times.npy"

  # Camera parameters
  K: [376,   0, 376,
        0, 376, 240,
        0,   0,   1]
  D: [ 0, 0, 0, 0]
  width: 752
  height: 480

depth_data:
  type: "npy"
  path: "/home/${USER}/data/Hercules_datasets/V1.4/extract/files_for_roman_baseline/${ROBOT}/depth/imgs.npy"
  path_times: "/home/${USER}/data/Hercules_datasets/V1.4/extract/files_for_roman_baseline/${ROBOT}/depth/times.npy"
  K: [376,   0, 376,
        0, 376, 240,
        0,   0,   1]
  D: [ 0, 0, 0, 0]
  width: 752
  height: 480

pose_data:
  # Load from csv to avoid expensive rosbag search
  type: "csv"
  path: "/home/${USER}/data/Hercules_datasets/V1.4/extract/files_for_roman_baseline/${ROBOT}/vins_result_no_loop_reformatted.csv"

  # Time tolerance used to reject available data if no pose data is within the time tolerance value
  time_tol: 0.03
  interp: False # Don't interpolate between poses
  causal: True  # Can't use more than one pose for multiple frames

  # Options that inform the algorithm where data is saved in the CSV file
  csv_options:
    cols:
      time: ["timestamp"]
      position: ["x", "y", "z"]
      orientation: ["qx", "qy", "qz", "qw"]
    col_nums:
      time: [0]
      position: [1, 2, 3]
      orientation: [5, 6, 7, 4]

    # Used to convert timestamps in csv to seconds.
    timescale: 1.0
  
  # Pose of FLU frame (or base frame in same location as camera) w.r.t camera frame
  T_camera_flu:
    input_type: "string"
    string: "T_RDFFLU" 

  # Pose of the camera frame with respect to the odometry base frame
  T_odombase_camera:
    input_type: matrix_${ROBOT}
    matrix_Husky1: [ 0, 0, 1, 0,
                    -1, 0, 0, 0,
                     0,-1, 0, 0.35,
                     0, 0, 0, 1]
    matrix_Husky2: [ 0, 0, 1, 0,
                    -1, 0, 0, 0,
                     0,-1, 0, 0.35,
                     0, 0, 0, 1]
    matrix_Drone1: [ 0,  0.17364818,  0.98480775,  0.35,      
                    -1,           0,           0,     0,       
                     0, -0.98480775,  0.17364818,  -0.1,    
                     0,           0,           0,     1]
    matrix_Drone2: [ 0,  0.17364818,  0.98480775,  0.35,      
                    -1,           0,           0,     0,       
                     0, -0.98480775,  0.17364818,  -0.1,    
                     0,           0,           0,     1]